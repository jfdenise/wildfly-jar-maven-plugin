<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2020 Red Hat, Inc. and/or its affiliates
    and other contributors as indicated by the @author tags.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.wildfly.plugins</groupId>
        <artifactId>wildfly-jar-parent</artifactId>
        <version>3.0.0.Beta1-SNAPSHOT</version>
    </parent>

    <artifactId>wildfly-jar-maven-plugin-tests</artifactId>
    <packaging>jar</packaging>

    <name>WildFly Bootable JAR Maven Plugin tests</name>

    <properties>
        <test.jvm.args />
        <jbossas.dist>${basedir}/target/wildfly-full</jbossas.dist>
    </properties>

    <dependencies>
         <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>wildfly-jar-maven-plugin</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>wildfly-jar-cloud-extension</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.maven.plugin-testing</groupId>
            <artifactId>maven-plugin-testing-harness</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-aether-provider</artifactId>
            <version>3.3.9</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-compat</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.aether</groupId>
            <artifactId>aether-connector-basic</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.aether</groupId>
            <artifactId>aether-transport-http</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.slf4j</groupId>
            <artifactId>slf4j-jboss-logging</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Required by controller-client which is used in tests -->
        <dependency>
            <groupId>org.wildfly.common</groupId>
            <artifactId>wildfly-common</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.wildfly.core</groupId>
            <artifactId>wildfly-patching</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap</groupId>
            <artifactId>shrinkwrap-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap</groupId>
            <artifactId>shrinkwrap-impl-base</artifactId>
            <scope>test</scope>
      </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- provision a full server to be used as patching distribution source -->
            <plugin>
                <groupId>org.jboss.galleon</groupId>
                <artifactId>galleon-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>server-provisioning-for-patching</id>
                        <goals>
                            <goal>provision</goal>
                        </goals>
                        <phase>process-test-resources</phase>
                        <configuration>
                            <install-dir>${jbossas.dist}</install-dir>
                            <record-state>false</record-state>
                            <plugin-options>
                                <jboss-fork-embedded>true</jboss-fork-embedded>
                            </plugin-options>
                            <feature-packs>
                                <feature-pack>
                                    <groupId>${wildfly.groupId}</groupId>
                                    <artifactId>${wildfly.artifactId}</artifactId>
                                    <version>${version.wildfly}</version>
                                </feature-pack>
                            </feature-packs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <!--
                    This is required for tests to run successfully on Windows and run properly in general. The issue
                    being is the MOJO will initialize JBoss Modules in the JVM. Once this happens and a module is loaded
                    the module, JAR file in this case, is an open resource and cannot be freed. On some OS's, like
                    Windows, this means the resource cannot be deleted. By executing each test in a new JVM this will
                    release the resource allowing the modules to be deleted for the next test.
                -->
                <configuration>
                    <reuseForks>false</reuseForks>
                </configuration>
                <executions>
                    <!-- Enable the default tests (which the parent pom turns off for this profile) -->
                    <execution>
                        <id>default-test</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <systemProperties>
                                <property>
                                    <name>test.fpl</name>
                                    <value>${test.fpl}</value>
                                </property>
                                <property>
                                    <name>test.plugin.version</name>
                                    <value>${project.version}</value>
                                </property>
                                <property>
                                    <name>test.patch.version</name>
                                    <value>${test.patch.version}</value>
                                </property>
                                <property>
                                    <name>test.patch.product</name>
                                    <value>${test.patch.product}</value>
                                </property>
                                <property>
                                    <name>jbossas.dist</name>
                                    <value>${jbossas.dist}</value>
                                </property>
                            </systemProperties>
                            <redirectTestOutputToFile>true</redirectTestOutputToFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
